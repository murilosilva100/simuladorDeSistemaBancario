-- Criação do banco de dados
CREATE DATABASE IF NOT EXISTS bancomalvaderbm;
USE bancomalvaderbm;

-- Tabela usuario
CREATE TABLE usuario (
    id_usuario INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    cpf VARCHAR(11) UNIQUE NOT NULL,
    data_nascimento DATE NOT NULL,
    telefone VARCHAR(15) NOT NULL,
    tipo_usuario ENUM('FUNCIONARIO', 'CLIENTE') NOT NULL,
    senha_hash VARCHAR(32) NOT NULL,
    otp_ativo VARCHAR(6),
    otp_expiracao DATETIME
);

INSERT INTO usuario (nome, cpf, data_nascimento, telefone, tipo_usuario, senha_hash, otp_ativo, otp_expiracao)
VALUES
('Ana Silva', '12345678901', '1990-05-10', '(11)91234-5678', 'FUNCIONARIO', MD5('senha123'), '123456', '2025-06-17 10:00:00'),
('Carlos Lima', '23456789012', '1985-03-20', '(21)92345-6789', 'FUNCIONARIO', MD5('senha234'), NULL, NULL),
('John Marston', '34567890123', '2000-11-15', '(31)93456-7890', 'CLIENTE', MD5('121212'), '654321', '2025-06-17 11:00:00'),
('Pedro Martins', '45678901234', '1998-08-05', '(41)94567-8901', 'CLIENTE', MD5('senha456'), NULL, NULL);


select *from usuario;

-- Tabela funcionario
CREATE TABLE funcionario (
    id_funcionario INT AUTO_INCREMENT PRIMARY KEY,
    id_usuario INT NOT NULL,
    codigo_funcionario VARCHAR(20) UNIQUE NOT NULL,
    cargo ENUM('ESTAGIARIO', 'ATENDENTE', 'GERENTE') NOT NULL,
    id_supervisor INT,
    FOREIGN KEY (id_usuario) REFERENCES usuario(id_usuario),
    FOREIGN KEY (id_supervisor) REFERENCES funcionario(id_funcionario)
);

INSERT INTO funcionario (id_usuario, codigo_funcionario, cargo, id_supervisor)
VALUES
(1, 'FUNC001', 'GERENTE', NULL),
(2, 'FUNC002', 'ATENDENTE', 1),
-- Supomos que vamos criar mais dois funcionários como subordinados de id_funcionario 1
(1, 'FUNC003', 'ESTAGIARIO', 1),
(2, 'FUNC004', 'ESTAGIARIO', 1);

select *from usuario;

-- Tabela cliente
CREATE TABLE cliente (
    id_cliente INT AUTO_INCREMENT PRIMARY KEY,
    id_usuario INT NOT NULL,
    score_credito DECIMAL(5,2) DEFAULT 0,
    FOREIGN KEY (id_usuario) REFERENCES usuario(id_usuario)
);

INSERT INTO cliente (id_usuario, score_credito)
VALUES
(3, 750.50),
(4, 620.00),
-- Criando dois clientes fictícios adicionais com novos usuários:
(3, 800.00),
(4, 500.00);

select *from cliente;


-- Tabela endereco
CREATE TABLE endereco (
    id_endereco INT AUTO_INCREMENT PRIMARY KEY,
    id_usuario INT NOT NULL,
    cep VARCHAR(10) NOT NULL,
    local VARCHAR(100) NOT NULL,
    numero_casa INT NOT NULL,
    bairro VARCHAR(50) NOT NULL,
    cidade VARCHAR(50) NOT NULL,
    estado CHAR(2) NOT NULL,
    complemento VARCHAR(50),
    FOREIGN KEY (id_usuario) REFERENCES usuario(id_usuario),
    INDEX idx_cep (cep)
);

INSERT INTO endereco (id_usuario, cep, local, numero_casa, bairro, cidade, estado, complemento)
VALUES
(1, '01001-000', 'Rua A', 123, 'Centro', 'São Paulo', 'SP', 'Apto 101'),
(2, '02002-000', 'Av B', 456, 'Jardins', 'São Paulo', 'SP', ''),
(3, '03003-000', 'Rua C', 789, 'Savassi', 'Belo Horizonte', 'MG', 'Bloco 2'),
(4, '04004-000', 'Av D', 321, 'Boa Vista', 'Curitiba', 'PR', NULL);

select *from conta;


-- Tabela agencia
CREATE TABLE agencia (
    id_agencia INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(50) NOT NULL,
    codigo_agencia VARCHAR(10) UNIQUE NOT NULL,
    endereco_id INT NOT NULL,
    FOREIGN KEY (endereco_id) REFERENCES endereco(id_endereco)
);

INSERT INTO agencia (nome, codigo_agencia, endereco_id)
VALUES
('Agência Centro', '0010', 1),
('Agência Norte', '0020', 2),
('Agência Sul', '0030', 3),
('Agência Leste', '0040', 4);


-- Tabela conta
CREATE TABLE conta (
    id_conta INT AUTO_INCREMENT PRIMARY KEY,
    numero_conta VARCHAR(20) UNIQUE NOT NULL,
    id_agencia INT NOT NULL,
    saldo DECIMAL(15,2) NOT NULL DEFAULT 0,
    tipo_conta ENUM('POUPANCA', 'CORRENTE', 'INVESTIMENTO') NOT NULL,
    id_cliente INT NOT NULL,
    data_abertura DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    status ENUM('ATIVA', 'ENCERRADA', 'BLOQUEADA') NOT NULL DEFAULT 'ATIVA',
    FOREIGN KEY (id_agencia) REFERENCES agencia(id_agencia),
    FOREIGN KEY (id_cliente) REFERENCES cliente(id_cliente),
    INDEX idx_numero_conta (numero_conta)
);

INSERT INTO conta (numero_conta, id_agencia, saldo, tipo_conta, id_cliente, data_abertura, status)
VALUES
('10001-0', 1, 1500.00, 'POUPANCA', 1, NOW(), 'ATIVA'),
('10002-0', 2, 200.00, 'CORRENTE', 2, NOW(), 'ATIVA'),
('10003-0', 3, 5000.00, 'INVESTIMENTO', 1, NOW(), 'ATIVA'),
('10004-0', 4, 0.00, 'CORRENTE', 2, NOW(), 'BLOQUEADA');

select *from conta;

-- Tabela conta_poupanca
CREATE TABLE conta_poupanca (
    id_conta_poupanca INT AUTO_INCREMENT PRIMARY KEY,
    id_conta INT NOT NULL,
    taxa_rendimento DECIMAL(5,2) NOT NULL,
    ultimo_rendimento DATETIME,
    FOREIGN KEY (id_conta) REFERENCES conta(id_conta),
    UNIQUE (id_conta)
);

INSERT INTO conta_poupanca (id_conta, taxa_rendimento, ultimo_rendimento)
VALUES
(1, 0.75, '2025-06-01 00:00:00'),
(2, 0.70, NULL),
(3, 0.80, '2025-06-10 00:00:00'),
(4, 0.60, NULL);


-- Tabela conta_corrente
CREATE TABLE conta_corrente (
    id_conta_corrente INT AUTO_INCREMENT PRIMARY KEY,
    id_conta INT NOT NULL,
    limite DECIMAL(15,2) NOT NULL DEFAULT 0,
    data_vencimento DATE NOT NULL,
    taxa_manutencao DECIMAL(5,2) NOT NULL DEFAULT 0,
    FOREIGN KEY (id_conta) REFERENCES conta(id_conta),
    UNIQUE (id_conta)
);

INSERT INTO conta_corrente (id_conta, limite, data_vencimento, taxa_manutencao)
VALUES
(2, 1000.00, '2025-12-31', 15.00),
(4, 500.00, '2025-11-30', 10.00),
(1, 200.00, '2025-10-30', 5.00),
(3, 1500.00, '2025-09-30', 20.00);


-- Tabela conta_investimento
CREATE TABLE conta_investimento (
    id_conta_investimento INT AUTO_INCREMENT PRIMARY KEY,
    id_conta INT NOT NULL,
    perfil_risco ENUM('BAIXO', 'MEDIO', 'ALTO') NOT NULL,
    valor_minimo DECIMAL(15,2) NOT NULL,
    taxa_rendimento_base DECIMAL(5,2) NOT NULL,
    FOREIGN KEY (id_conta) REFERENCES conta(id_conta),
    UNIQUE (id_conta)
);

INSERT INTO conta_investimento (id_conta, perfil_risco, valor_minimo, taxa_rendimento_base)
VALUES
(3, 'ALTO', 1000.00, 1.20),
(1, 'MEDIO', 500.00, 1.10),
(2, 'BAIXO', 300.00, 0.95),
(4, 'MEDIO', 2000.00, 1.00);


-- Tabela transacao
CREATE TABLE transacao (
    id_transacao INT AUTO_INCREMENT PRIMARY KEY,
    id_conta_origem INT NOT NULL,
    id_conta_destino INT,
    tipo_transacao ENUM('DEPOSITO', 'SAQUE', 'TRANSFERENCIA', 'TAXA', 'RENDIMENTO') NOT NULL,
    valor DECIMAL(15,2) NOT NULL,
    data_hora TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    descricao VARCHAR(100),
    FOREIGN KEY (id_conta_origem) REFERENCES conta(id_conta),
    FOREIGN KEY (id_conta_destino) REFERENCES conta(id_conta),
    INDEX idx_data_hora (data_hora)
);

-- Tabela auditoria
CREATE TABLE auditoria (
    id_auditoria INT AUTO_INCREMENT PRIMARY KEY,
    id_usuario INT NOT NULL,
    acao VARCHAR(50) NOT NULL,
    data_hora TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    detalhes TEXT,
    FOREIGN KEY (id_usuario) REFERENCES usuario(id_usuario)
);

-- Tabela relatorio
CREATE TABLE relatorio (
    id_relatorio INT AUTO_INCREMENT PRIMARY KEY,
    id_funcionario INT NOT NULL,
    tipo_relatorio VARCHAR(50) NOT NULL,
    data_geracao TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    conteudo TEXT NOT NULL,
    FOREIGN KEY (id_funcionario) REFERENCES funcionario(id_funcionario)
);

CREATE TABLE historico (
    id_historico INT AUTO_INCREMENT PRIMARY KEY,
    id_conta INT NOT NULL,
    evento ENUM('CRIACAO', 'ENCERRAMENTO') NOT NULL,
    data_hora TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (id_conta) REFERENCES conta(id_conta)
);

select *from historico;

-- Gatilhos

-- Atualização de saldo após transações
DELIMITER $$
CREATE TRIGGER atualizar_saldo AFTER INSERT ON transacao
FOR EACH ROW
BEGIN
    IF NEW.tipo_transacao = 'DEPOSITO' THEN
        UPDATE conta SET saldo = saldo + NEW.valor WHERE id_conta = NEW.id_conta_origem;
    ELSEIF NEW.tipo_transacao IN ('SAQUE', 'TAXA') THEN
        UPDATE conta SET saldo = saldo - NEW.valor WHERE id_conta = NEW.id_conta_origem;
    ELSEIF NEW.tipo_transacao = 'TRANSFERENCIA' THEN
        UPDATE conta SET saldo = saldo - NEW.valor WHERE id_conta = NEW.id_conta_origem;
        UPDATE conta SET saldo = saldo + NEW.valor WHERE id_conta = NEW.id_conta_destino;
    END IF;
END $$
DELIMITER ;

-- Validação de senha forte

DELIMITER $$
CREATE TRIGGER validar_senha
BEFORE UPDATE ON usuario
FOR EACH ROW
BEGIN
    -- Gera erro se a nova senha NÃO for um hash MD5 válido
    IF NOT (NEW.senha_hash REGEXP '^[0-9a-f]{32}$') THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Senha deve estar em hash MD5 (atualize via função apropriada)';
    END IF;
END$$
DELIMITER ;

DROP TRIGGER IF EXISTS validar_senha;

-- Limite de depósito diário
DELIMITER $$
CREATE TRIGGER limite_deposito BEFORE INSERT ON transacao
FOR EACH ROW
BEGIN
    DECLARE total_dia DECIMAL(15,2);
    IF NEW.tipo_transacao = 'DEPOSITO' THEN
        SELECT SUM(valor) INTO total_dia
        FROM transacao
        WHERE id_conta_origem = NEW.id_conta_origem
          AND tipo_transacao = 'DEPOSITO'
          AND DATE(data_hora) = DATE(NEW.data_hora);
        
        IF (total_dia + NEW.valor) > 10000 THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Limite diário de depósito excedido';
        END IF;
    END IF;
END $$
DELIMITER ;

-- Procedimentos armazenados

-- Gerar OTP
DELIMITER $$
CREATE PROCEDURE gerar_otp(IN id_usuario INT)
BEGIN
    DECLARE novo_otp VARCHAR(6);
    SET novo_otp = LPAD(FLOOR(RAND() * 1000000), 6, '0');
    UPDATE usuario SET otp_ativo = novo_otp, otp_expiracao = NOW() + INTERVAL 5 MINUTE
    WHERE id_usuario = id_usuario;
    SELECT novo_otp;
END $$
DELIMITER ;

-- Calcular score de crédito
DELIMITER $$
CREATE PROCEDURE calcular_score_credito(IN id_cliente INT)
BEGIN
    DECLARE total_trans DECIMAL(15,2);
    DECLARE media_trans DECIMAL(15,2);
    SELECT SUM(valor), AVG(valor) INTO total_trans, media_trans
    FROM transacao t
    JOIN conta c ON t.id_conta_origem = c.id_conta
    WHERE c.id_cliente = id_cliente AND t.tipo_transacao IN ('DEPOSITO', 'SAQUE');
    
    UPDATE cliente SET score_credito = LEAST(100, (total_trans / 1000) + (media_trans / 100))
    WHERE id_cliente = id_cliente;
END $$
DELIMITER ;

-- Visões

-- Resumo de contas por cliente
CREATE VIEW vw_resumo_contas AS
SELECT c.id_cliente, u.nome, COUNT(co.id_conta) AS total_contas, SUM(co.saldo) AS saldo_total
FROM cliente c
JOIN usuario u ON c.id_usuario = u.id_usuario
JOIN conta co ON c.id_cliente = co.id_cliente
GROUP BY c.id_cliente, u.nome;

-- Movimentações recentes
CREATE VIEW vw_movimentacoes_recentes AS
SELECT t.*, c.numero_conta, u.nome AS cliente
FROM transacao t
JOIN conta c ON t.id_conta_origem = c.id_conta
JOIN cliente cl ON c.id_cliente = cl.id_cliente
JOIN usuario u ON cl.id_usuario = u.id_usuario
WHERE t.data_hora >= NOW() - INTERVAL 90 DAY;